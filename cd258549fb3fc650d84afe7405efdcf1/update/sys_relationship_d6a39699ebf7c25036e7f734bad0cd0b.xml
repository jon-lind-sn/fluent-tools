<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_relationship">
    <sys_relationship action="INSERT_OR_UPDATE">
        <advanced>true</advanced>
        <apply_to><![CDATA[answer = ((table_name) => {  
	// See if there are any script fields on this table.  If not, then don't offer the relationship.
    var dict = new GlideRecord("sys_dictionary");
	dict.addQuery("name", table_name);
    dict.addNotNullQuery("element");
    dict.addActiveQuery();
    dict.addQuery("internal_type", "script").addOrCondition("internal_type", "script_plain");

	dict.query();

	return dict.hasNext();
})(table_name);]]></apply_to>
        <basic_apply_to>global</basic_apply_to>
        <basic_query_from/>
        <insert_callback/>
        <name>ES Modules</name>
        <query_from><![CDATA[answer = "sys_module";]]></query_from>
        <query_with><![CDATA[(function refineQuery(current, parent) {
	// Look at the contents of all Script fields on the page and see if they have "requires" 
	// references.  If so, build a query to filter down the modules that it is referencing.
	// E.g. if it's using "requires('./src/server/myscript.js')" then find the modules with that
	// name in that scope.
    var dict = new GlideRecord("sys_dictionary");
    dict.addQuery("name", parent.getTableName());
    dict.addNotNullQuery("element");
    dict.addActiveQuery();
    dict.addQuery("internal_type", "CONTAINS", "script");

    dict.query();

    const pathQueries = [];
    while (dict.next()) {
        var value = parent.getValue(dict.element + "");

        //gs.info(value);
        var regex = /require\(['"]\.?([^'"]+)['"]\)/g;

        var match;
        while ((match = regex.exec(value)) !== null) {
            var pathQuery = match[1];
            if (!pathQueries.includes(pathQuery)) {
                pathQueries.push(pathQuery);
            }
        }
    }

    if (pathQueries.length == 0) {
        // We want no records to return if there are no path matches in the source code
        current.addQuery("sys_scope=XXXXXX");
    } else {
        var query;
        for (var i = 0; i < pathQueries.length; i++) {
            if (!query) {
                current.addQuery("sys_scope", parent.sys_scope);
                query = current.addQuery("path", "ENDSWITH", pathQueries[i]);
            } else {
                query.addOrCondition("path", "ENDSWITH", pathQueries[i]);
            }
        }
    }
})(current, parent);]]></query_with>
        <reference_field/>
        <related_list/>
        <simple_reference>false</simple_reference>
        <sys_class_name>sys_relationship</sys_class_name>
        <sys_created_by>jon.lind</sys_created_by>
        <sys_created_on>2024-08-02 22:21:17</sys_created_on>
        <sys_id>d6a39699ebf7c25036e7f734bad0cd0b</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>ES Modules</sys_name>
        <sys_package display_value="Fluent Extensions" source="cd258549fb3fc650d84afe7405efdcf1">cd258549fb3fc650d84afe7405efdcf1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Fluent Extensions">cd258549fb3fc650d84afe7405efdcf1</sys_scope>
        <sys_update_name>sys_relationship_d6a39699ebf7c25036e7f734bad0cd0b</sys_update_name>
        <sys_updated_by>jon.lind</sys_updated_by>
        <sys_updated_on>2024-08-22 21:48:47</sys_updated_on>
    </sys_relationship>
    <sys_translated_text action="delete_multiple" query="documentkey=d6a39699ebf7c25036e7f734bad0cd0b"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>d6a39699ebf7c25036e7f734bad0cd0b</id>
        <sys_created_by>jon.lind</sys_created_by>
        <sys_created_on>2024-08-22 15:51:56</sys_created_on>
        <sys_id>227abb2f1b4cde1021b62064604bcb26</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>jon.lind</sys_updated_by>
        <sys_updated_on>2024-08-22 15:51:56</sys_updated_on>
        <table>sys_relationship</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
